package simpledb;
import java.io.IOException;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc td;

    private Tuple left;

    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        td = TupleDesc.combine(child1.getTupleDesc(), child2.getTupleDesc());
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return td;
    }

    public void open()
            throws DbException, NoSuchElementException, TransactionAbortedException, IOException {
        child1.open();
        child2.open();
        left = null;
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException, IOException {
        child1.rewind();
        child2.rewind();
        left = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException, IOException {
        while (true) {
            if (left == null) {
                if (child1.hasNext()) {
                    left = child1.next();
                    child2.rewind();
                } else {
                    return null;
                }
            }
            while (child2.hasNext()) {
                Tuple right = child2.next();
                if (p.filter(left, right)) {
                    Tuple join = new Tuple(td);
                    for (int i = 0; i < td.numFields(); i += 1) {
                        if (i < child1.getTupleDesc().numFields()) {
                            join.setField(i, left.getField(i));
                        } else {
                            join.setField(i, right.getField(i-child1.getTupleDesc().numFields()));
                        }
                    }
                    return join;
                }
            }
            left = null;
        }
    }
}
